server:
  port: 8080

spring:
  application:
    name: tripmind-ai
  
  # Configuración de Spring AI
  ai:
    openai:
      api-key: ${OPENAI_API_KEY:your-openai-api-key}
      base-url: ${OPENAI_BASE_URL:https://api.openai.com/v1}
      chat:
        options:
          model: ${OPENAI_MODEL:gpt-3.5-turbo}
          temperature: 0.7
          max-tokens: 2000

  # Configuración de base de datos (comentada para Supabase)
  # datasource:
  #   url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/tripmind_ai}
  #   username: ${DATABASE_USERNAME:postgres}
  #   password: ${DATABASE_PASSWORD:password}
  #   driver-class-name: org.postgresql.Driver
  # 
  # jpa:
  #   hibernate:
  #     ddl-auto: update
  #   show-sql: true
  #   properties:
  #     hibernate:
  #       dialect: org.hibernate.dialect.PostgreSQLDialect

# Configuración de logging
logging:
  level:
    com.tripmind.ai: DEBUG
    org.springframework.ai: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# Configuración de Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

# Configuración personalizada de la aplicación
app:
  ai:
    provider: ${AI_PROVIDER:openai} # openai, deepseek, local
    model: ${AI_MODEL:gpt-3.5-turbo}
  external-apis:
    weather:
      api-key: ${WEATHER_API_KEY:your-weather-api-key}
      base-url: https://api.openweathermap.org/data/2.5
    flights:
      api-key: ${FLIGHTS_API_KEY:your-flights-api-key}
      base-url: ${FLIGHTS_BASE_URL:https://api.skyscanner.net}
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:4321,http://localhost:3000}
